@use "sass:math";
@use "sass:map";
@use "sass:color";
@use "src/styles/colors.scss" as colors;

$type-base-size: 1rem;

// Tailwind components
@mixin components {
  .subtitle {
    @apply heading-4 m-0 tracking-wider font-extrabold uppercase;
  }

  .stroke-light-shades {
    -webkit-text-stroke-color: colors.$light-shades;
    -webkit-text-stroke-width: 1px;
  }

  @include fluid-header-components;
}

// Tailwind utilities
@mixin utilities {
  @include text-colors;  
}

@mixin text-colors {
  .text-light-shades {
    color: colors.$light-shades;
  }

  .text-dark-accent {
    color: colors.$dark-accent;
  }

  .text-light-accent {
    color: colors.$light-accent;
  }

  .text-main-brand {
    color: colors.$main-brand;
  }
}

// Tailwind base
@mixin base {
  body {
    color: red;
    font-size: $type-base-size;
  }

  h1 {
    @apply heading-1;
  }

  h2 {
    @apply heading-2;
  }

  h3 {
    @apply heading-3;
  }

  h4 {
    @apply heading-4;
  }

  p {
    // Source: https://hugogiraudel.com/2020/05/18/using-calc-to-figure-out-optimal-line-height/
    line-height: calc(2px + 2ex + 2px);
  }

  code {
    @apply font-mono;
  }

  .styled-link {
    @include links;
  }
}

@mixin links {
  a {
    padding: 2px 1px 0;
    outline: none;
    text-decoration: none;
  }
  
  a:link {
    color: colors.$light-accent;
  }
  
  a:visited {
    color: colors.$dark-accent;
  }
  
  a:focus {
    border-bottom: 1px solid;
    background: color.scale(colors.$main-brand, $lightness: -75%);
  }
  
  a:hover {
    border-bottom: 1px solid;
    background: color.scale(colors.$main-brand, $lightness: -50%);
  }
  
  a:active {
    background: colors.$light-accent;
    color: color.scale(colors.$main-brand, $lightness: -50%);
  }
}

// Fluid font size
// Template adapted from https://moderncss.dev/generating-font-size-css-rules-and-creating-a-fluid-type-scale/

// Select a ratio to preview
// Default is "perfectFourth"
$type-ratios: (
  "minorSecond": 1.067,
  "majorSecond": 1.125,
  "minorThird": 1.2,
  "majorThird": 1.25,
  "perfectFourth": 1.333,
  "augmentedFourth": 1.414,
  "perfectFifth": 1.5,
  "goldenRatio": 1.618,
);

@function type-ratio($key) {
  @return map-get($type-ratios, $key);
}

// Select by key of map, or use a custom value
$type-size-ratio: type-ratio("perfectFourth");

// List in descending order to prevent extra sort function
// Limited to high-touch heading styles
$type-levels: 4, 3, 2, 1;

// Create map with h[x] as key
// and computed font-size as value
$type-styles: ();
$level-size: $type-base-size;
@mixin fluid-header-components {
  @each $level in $type-levels {
    $level-size: $level-size * $type-size-ratio;
    $type-styles: map.merge($type-styles, (#{"h"}$level: $level-size));

    // Output heading styles
    // Create utility class
    .heading-#{$level} {
      // Set with `em` to be relative to current `font-size`
      margin-bottom: 0.65em;

      // Fallback for browsers that don't support min / max
      font-size: $level-size;

      // Limit in place based on testing -> smaller ratios are
      // prematurely or unnecessarily reduced
      @if $type-size-ratio > 1.2 {
        // Fluid type styles

        // Remove unit for calculations
        $level-unitless: math.div($level-size, ($level-size * 0 + 1));

        // Set minimum size to a percentage less than $level-size
        // Reduction is greater for large font sizes (> 4rem) to help
        // prevent overflow due to font-size on mobile devices
        $fluid-reduction: if($level-size > 4, 0.5, 0.33);
        $fluid-min: $level-unitless - ($fluid-reduction * $level-unitless);

        // Prevent dropping lower than 1rem (body font-size)
        $fluid-min: if($fluid-min > $type-base-size, $fluid-min, 1);

        // Adjust max modifier slightly per level to prevent "same" size
        // or lower levels appaering larger than higher levels
        // 4vw was selected by testing from $type-ratios map, YMMV ðŸ™ƒ
        $fluid-scaler: ($level-unitless - $fluid-min) + 4vw;

        font-size: clamp(
          #{$fluid-min}rem,
          #{$fluid-scaler} + 1rem,
          #{$level-size}
        );
      }
    }
  }
}

@function type-style($key) {
  @return map-get($type-styles, $key);
}
