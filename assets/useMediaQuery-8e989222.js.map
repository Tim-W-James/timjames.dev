{"version":3,"file":"useMediaQuery-8e989222.js","sources":["../../src/hooks/useMediaQuery.ts"],"sourcesContent":["import { isMobile } from \"react-device-detect\";\n\n/**\n * Hook to check if a css media query is true\n *\n * @param query media query to use\n * @example useMediaQuery(\"(min-width: 1280px)\")\n */\nconst useMediaQuery = (query: string) => {\n  const [matches, setMatches] = useState(false);\n  useEffect(\n    () => {\n      const mediaQuery = window.matchMedia(query);\n      setMatches(mediaQuery.matches);\n      const handler = (event: MediaQueryListEvent) => setMatches(event.matches);\n      mediaQuery.addEventListener(\"change\", handler);\n      return () => mediaQuery.removeEventListener(\"change\", handler);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [] // Empty array ensures effect is only run on mount and unmount\n  );\n  return matches;\n};\n\n/**\n * Check if on a mobile device\n */\nexport const useMobileQuery = () =>\n  // Both methods have false negatives, so we use both\n  useMediaQuery(\"(hover: none) and (pointer: coarse)\") || isMobile;\n\n/**\n * Check if the primary input is touch (not necessarily a mobile device)\n */\nexport const useTouchInputQuery = () => useMediaQuery(\"(pointer: coarse)\");\n\nexport default useMediaQuery;\n"],"names":["useMediaQuery","query","matches","setMatches","useState","useEffect","mediaQuery","handler","event","useMobileQuery","isMobile","useTouchInputQuery"],"mappings":"oEAQM,MAAAA,EAAiBC,GAAkB,CACvC,KAAM,CAACC,EAASC,CAAU,EAAIC,WAAS,EAAK,EAC5CC,OAAAA,EAAA,UACE,IAAM,CACE,MAAAC,EAAa,OAAO,WAAWL,CAAK,EAC1CE,EAAWG,EAAW,OAAO,EAC7B,MAAMC,EAAWC,GAA+BL,EAAWK,EAAM,OAAO,EAC7D,OAAAF,EAAA,iBAAiB,SAAUC,CAAO,EACtC,IAAMD,EAAW,oBAAoB,SAAUC,CAAO,CAC/D,EAEA,CAAC,CAAA,EAEIL,CACT,EAKaO,EAAiB,IAE5BT,EAAc,qCAAqC,GAAKU,EAK7CC,EAAqB,IAAMX,EAAc,mBAAmB"}