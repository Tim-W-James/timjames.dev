{"version":3,"file":"encodeQueryParams-c6953622.js","sources":["../../src/hooks/useLocalStorage.ts","../../src/hooks/useQueryParams.ts","../../src/utils/encodeQueryParams.ts"],"sourcesContent":["// Adapted from: https://usehooks.com/useLocalStorage/\n\n/**\n * Get and set a value in browser local storage\n *\n * @param key - key for the data\n * @param initialValue - initial data value\n */\nconst useLocalStorage = <T>(key: string, initialValue: T) => {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    if (typeof window === \"undefined\") {\n      return initialValue;\n    }\n\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.error(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value: T | ((val: T) => T)) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      if (typeof window !== \"undefined\") {\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      }\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.error(error);\n    }\n  };\n\n  return [storedValue, setValue] as const;\n};\n\nexport default useLocalStorage;\n","import { useLocation } from \"react-router-dom\";\n\n/**\n * Get query params from the current URL.\n */\nexport const useQueryParams = () => {\n  const { search } = useLocation();\n\n  return useMemo(() => new URLSearchParams(search), [search]);\n};\n","export const encodeArrayAsCsv = (data: string[]) =>\n  data.map((item) => encodeURIComponent(item)).join(\",\");\n\nexport const decodeArrayAsCsv = (data: string) =>\n  data.split(\",\").map((item) => decodeURIComponent(item));\n"],"names":["useLocalStorage","key","initialValue","storedValue","setStoredValue","useState","item","error","value","valueToStore","useQueryParams","search","useLocation","useMemo","encodeArrayAsCsv","data","decodeArrayAsCsv"],"mappings":"gFAQM,MAAAA,EAAkB,CAAIC,EAAaC,IAAoB,CAG3D,KAAM,CAACC,EAAaC,CAAc,EAAIC,WAAY,IAAM,CAClD,GAAA,OAAO,OAAW,IACb,OAAAH,EAGL,GAAA,CAEF,MAAMI,EAAO,OAAO,aAAa,QAAQL,CAAG,EAE5C,OAAOK,EAAO,KAAK,MAAMA,CAAI,EAAIJ,QAC1BK,EAAO,CAEd,eAAQ,MAAMA,CAAK,EACZL,CACT,CAAA,CACD,EAqBM,MAAA,CAACC,EAjBUK,GAA+B,CAC3C,GAAA,CAEF,MAAMC,EACJD,aAAiB,SAAWA,EAAML,CAAW,EAAIK,EAEnDJ,EAAeK,CAAY,EAEvB,OAAO,OAAW,KACpB,OAAO,aAAa,QAAQR,EAAK,KAAK,UAAUQ,CAAY,CAAC,QAExDF,EAAO,CAEd,QAAQ,MAAMA,CAAK,CACrB,CAAA,CAG2B,CAC/B,EC3CaG,EAAiB,IAAM,CAC5B,KAAA,CAAE,OAAAC,GAAWC,IAEZ,OAAAC,EAAAA,QAAQ,IAAM,IAAI,gBAAgBF,CAAM,EAAG,CAACA,CAAM,CAAC,CAC5D,ECTaG,EAAoBC,GAC/BA,EAAK,IAAKT,GAAS,mBAAmBA,CAAI,CAAC,EAAE,KAAK,GAAG,EAE1CU,EAAoBD,GAC/BA,EAAK,MAAM,GAAG,EAAE,IAAKT,GAAS,mBAAmBA,CAAI,CAAC"}