{"version":3,"file":"Blog.stories-695c47e1.js","sources":["../../src/pages/Blog.tsx","../../src/pages/Blog.stories.tsx"],"sourcesContent":["import Button from \"@components/buttons/Button\";\nimport MultiSelection, {\n  Option,\n  SingleSelection,\n} from \"@components/input/MultiSelection\";\nimport SearchField from \"@components/input/SearchField\";\nimport BlogCard from \"@features/blog/components/BlogCard\";\nimport BlogCardLoading from \"@features/blog/components/BlogCardLoading\";\nimport { devdottoArticlesMeta } from \"@features/blog/services/devdottoArticle\";\nimport { DevdottoArticleMeta } from \"@features/blog/types/devdottoArticle\";\nimport useLocalStorage from \"@hooks/useLocalStorage\";\nimport { useQueryParams } from \"@hooks/useQueryParams\";\nimport cn from \"@styles/cssUtils\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { decodeArrayAsCsv, encodeArrayAsCsv } from \"@utils/encodeQueryParams\";\nimport { RiRefreshFill } from \"react-icons/ri\";\nimport { SiDevdotto, SiMedium } from \"react-icons/si\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst sorts = [\"Popularity\", \"Latest\", \"Quick Reads\"] as const;\n\ntype SortOption = {\n  value: (typeof sorts)[number];\n  label: (typeof sorts)[number];\n};\n\nconst sortOptions: readonly SortOption[] = sorts.map((sort) => ({\n  value: sort,\n  label: sort,\n}));\n\nconst sortByPopularity = (a: DevdottoArticleMeta, b: DevdottoArticleMeta) =>\n  b.public_reactions_count - a.public_reactions_count;\n\nconst sortByQuickReads = (a: DevdottoArticleMeta, b: DevdottoArticleMeta) =>\n  a.reading_time_minutes - b.reading_time_minutes;\n\nconst sortByLatest = (a: DevdottoArticleMeta, b: DevdottoArticleMeta) =>\n  new Date(b.published_timestamp).getTime() -\n  new Date(a.published_timestamp).getTime();\n\nconst sortFuncFromOption = (\n  sort: (typeof sorts)[number]\n): ((a: DevdottoArticleMeta, b: DevdottoArticleMeta) => number) => {\n  switch (sort) {\n    case \"Latest\":\n      return sortByLatest;\n\n    case \"Quick Reads\":\n      return sortByQuickReads;\n\n    case \"Popularity\":\n      return sortByPopularity;\n\n    default:\n      return () => 0;\n  }\n};\n\nconst searchFilter = (searchText: string, item: DevdottoArticleMeta) => {\n  const search = searchText.toLowerCase();\n  return (\n    search.length === 0 ||\n    item.title.toLowerCase().includes(search) ||\n    item.description.toLowerCase().includes(search) ||\n    item.tag_list.some((tag) => tag.toLowerCase().includes(search))\n  );\n};\n\ntype BlogOptions = {\n  tags: readonly Option[];\n  sort: SortOption;\n  searchText: string;\n};\n\nconst articlesToDisplay = 100;\n\nconst Blog = () => {\n  const { status, data: articles } = useQuery(\n    [`devdotto-meta-${articlesToDisplay}}`],\n    devdottoArticlesMeta(articlesToDisplay)\n  );\n  const [selectedTags, setSelectedTags] = useState<readonly Option[]>([]);\n  const [selectedSort, setSelectedSort] = useState<SortOption>(sortOptions[0]!);\n  const [tagOptions, setTagOptions] = useState<readonly Option[]>([]);\n  const [searchText, setSearchText] = useState<string>(\"\");\n\n  useEffect(() => {\n    setTagOptions(\n      !articles\n        ? []\n        : [...new Set(articles.flatMap((articleMeta) => articleMeta.tag_list))]\n            .map((tag) => {\n              const count = articles.filter((articleMeta) =>\n                articleMeta.tag_list.includes(tag)\n              ).length;\n              return {\n                value: tag,\n                count,\n                label: `${tag} (${count})`,\n              };\n            })\n            .filter((option) => option.count > 0)\n            .sort((a, b) => b.count - a.count)\n    );\n  }, [articles]);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    e.preventDefault();\n    setSearchText(e.target.value);\n  };\n\n  const [isResetButtonAnimated, setIsResetButtonAnimated] = useState(false);\n\n  const resetOptions = () => {\n    setSelectedTags([]);\n    setSelectedSort(sortOptions[0]!);\n    setSearchText(\"\");\n    setIsResetButtonAnimated(true);\n    setTimeout(() => {\n      setIsResetButtonAnimated(false);\n    }, 500);\n  };\n\n  const navigate = useNavigate();\n\n  const [localStorageProjectOptions, setLocalStorageProjectOptions] =\n    useLocalStorage<BlogOptions>(\"blogOptions\", {\n      tags: [],\n      sort: sortOptions[0]!,\n      searchText: \"\",\n    });\n\n  const queryParams = useQueryParams();\n\n  useEffect(() => {\n    if (queryParams.toString()) {\n      // Query params take precedence over local storage on initial load\n      if (queryParams.get(\"reset\")) {\n        resetOptions();\n        navigate({\n          hash: window.location.hash,\n          search: \"\",\n        });\n        return () => {};\n      }\n      setSelectedTags([]);\n      decodeArrayAsCsv(queryParams.get(\"technologies\") || \"\").forEach(\n        (value) => {\n          const option = selectedTags.find(\n            (o) => o.value.toLowerCase() === value.toLowerCase()\n          );\n          if (option) {\n            setSelectedTags((prev) => [...prev, option]);\n          }\n        }\n      );\n      setSelectedSort(\n        sortOptions.find(\n          (o) =>\n            o.value.toLowerCase() === queryParams.get(\"sort\")?.toLowerCase()\n        ) || sortOptions[0]!\n      );\n      setSearchText(queryParams.get(\"searchText\") || \"\");\n    } else {\n      // Populate the options from local storage\n      setSelectedTags(localStorageProjectOptions.tags);\n      setSelectedSort(localStorageProjectOptions.sort);\n      setSearchText(localStorageProjectOptions.searchText);\n    }\n    return () => {};\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    // Update local storage when options change\n    setLocalStorageProjectOptions({\n      tags: selectedTags,\n      sort: selectedSort,\n      searchText,\n    });\n    // Update query params\n    navigate({\n      hash: window.location.hash,\n      search:\n        \"?\" +\n        new URLSearchParams(\n          // Strip any undefined values\n          JSON.parse(\n            JSON.stringify({\n              tags:\n                encodeArrayAsCsv(selectedTags.map((t) => t.value)) || undefined,\n              sort:\n                selectedSort.value === sortOptions[0]?.value\n                  ? undefined\n                  : selectedSort.value,\n              searchText: searchText || undefined,\n            })\n          )\n        ).toString(),\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [searchText, selectedSort, selectedTags]);\n\n  const filteredArticles =\n    status === \"loading\" || status === \"error\"\n      ? []\n      : articles\n          .sort(sortByPopularity)\n          .sort(sortFuncFromOption(selectedSort.value))\n          .filter((articleMeta) => {\n            const tags = selectedTags.map((tag) => tag.value);\n            return (\n              searchFilter(searchText, articleMeta) &&\n              (selectedTags.length === 0 ||\n                articleMeta.tag_list.filter((articleTag) =>\n                  tags.includes(articleTag)\n                ).length !== 0)\n            );\n          })\n          .map((articleMeta, index) => (\n            <BlogCard article={articleMeta} key={index} />\n          ));\n\n  return (\n    <div>\n      <div\n        className={cn(\n          \"flex gap-4 justify-center items-center max-w-2xl mx-auto mb-8\",\n          \"flex-row\",\n          \"flex-wrap\"\n        )}\n      >\n        <Button\n          icon={<SiDevdotto />}\n          isLight\n          label={\"DEV.to\"}\n          to=\"https://dev.to/timwjames\"\n          tooltip=\"Find my personal blog @timwjames\"\n        />\n        <Button\n          icon={<SiMedium />}\n          isLight\n          label={\"Medium\"}\n          to=\"https://medium.com/@twjames\"\n          tooltip=\"Find my professional @twjames\"\n        />\n      </div>\n      <section\n        aria-label=\"Search Controls\"\n        className={cn(\n          \"flex mx-auto items-center place-content-center mb-4\",\n          \"flex-col\"\n        )}\n      >\n        <div className={cn(\"w-full flex gap-4\")}>\n          <SearchField handleChange={handleChange} searchText={searchText} />\n          <Button\n            className={cn(\"text-3xl !px-2 py-2 -mt-1\")}\n            icon={\n              isResetButtonAnimated ? (\n                <span\n                  className={cn(\n                    \"inline-block\",\n                    \"leading-0\",\n                    \"motion-safe:animate-spin\"\n                  )}\n                >\n                  <RiRefreshFill />\n                </span>\n              ) : (\n                <RiRefreshFill />\n              )\n            }\n            iconRight\n            isLabelHidden\n            isLight\n            label={\"Reset\"}\n            mode=\"button\"\n            onClick={resetOptions}\n            tooltip=\"Reset search and filter options\"\n          />\n        </div>\n        <div className={cn(\"flex gap-4 w-full\", \"flex-wrap\")}>\n          <div className={cn(\"z-30 grow min-w-fit\")}>\n            <SingleSelection\n              options={sortOptions}\n              selectedOption={selectedSort}\n              setSelectedOption={setSelectedSort}\n            />\n          </div>\n          <div className={cn(\"z-20 grow\")}>\n            <MultiSelection\n              options={tagOptions}\n              placeholder=\"Filter by tags...\"\n              selectedOptions={selectedTags}\n              setSelectedOptions={setSelectedTags}\n            />\n          </div>\n        </div>\n      </section>\n      <section\n        aria-label=\"Blogs\"\n        className={cn(\"flex gap-4 p-0 justify-center\", \"flex-wrap\")}\n      >\n        {status === \"loading\" ? (\n          [...Array(6).keys()].map((key) => <BlogCardLoading key={key} />)\n        ) : status === \"error\" ? (\n          <div className={cn(\"text-center mb-8 text-xl \")}>\n            <span className={cn(\"text-danger\")}>Something went wrong</span> -\n            Try again later\n          </div>\n        ) : filteredArticles.length === 0 ? (\n          <div className={cn(\"text-center mb-8 text-xl \")}>\n            <span className={cn(\"text-danger\")}>No articles found</span> - Try a\n            different filter\n          </div>\n        ) : (\n          filteredArticles\n        )}\n      </section>\n    </div>\n  );\n};\n\nexport default Blog;\n","import Footer from \"@components/layout/Footer\";\nimport Page from \"@components/layout/Page\";\nimport Navbar from \"@components/layout/nav/Navbar\";\nimport ScrollToTop from \"@components/utils/ScrollToTop\";\nimport { BLOG } from \"@constants/routes\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport BlogPage from \"./Blog\";\nexport default {\n  component: BlogPage,\n  parameters: {\n    backgrounds: {\n      disable: true\n    },\n    controls: {\n      hideNoControlsWarning: true\n    }\n  }\n};\nexport const Blog = () => <Router>\n    <ScrollToTop />\n    <Navbar />\n    <Page content={<BlogPage />} description={BLOG.description} title={BLOG.title} />\n    <Footer allowFixed />\n  </Router>;\nBlog.parameters = {\n  ...Blog.parameters,\n  storySource: {\n    source: \"() => <Router>\\n    <ScrollToTop />\\n    <Navbar />\\n    <Page content={<BlogPage />} description={BLOG.description} title={BLOG.title} />\\n    <Footer allowFixed />\\n  </Router>\",\n    ...Blog.parameters?.storySource\n  }\n};"],"names":["sorts","sortOptions","sort","sortByPopularity","a","b","sortByQuickReads","sortByLatest","sortFuncFromOption","searchFilter","searchText","item","search","tag","articlesToDisplay","Blog","status","articles","useQuery","devdottoArticlesMeta","selectedTags","setSelectedTags","useState","selectedSort","setSelectedSort","tagOptions","setTagOptions","setSearchText","useEffect","articleMeta","count","option","handleChange","e","isResetButtonAnimated","setIsResetButtonAnimated","resetOptions","navigate","useNavigate","localStorageProjectOptions","setLocalStorageProjectOptions","useLocalStorage","queryParams","useQueryParams","decodeArrayAsCsv","value","o","prev","_a","encodeArrayAsCsv","t","filteredArticles","tags","articleTag","index","jsx","BlogCard","jsxs","cn","Button","SiDevdotto","SiMedium","SearchField","RiRefreshFill","SingleSelection","MultiSelection","key","BlogCardLoading","BlogPage","Blog_stories","Router","ScrollToTop","Navbar","Page","BLOG","Footer"],"mappings":"moCAmBA,MAAAA,EAAA,CAAA,aAAA,SAAA,aAAA,EAOAC,EAAAD,EAAA,IAAAE,IAAA,CAAgE,MAAAA,EACvD,MAAAA,CAET,EAAA,EAEAC,EAAA,CAAAC,EAAAC,IAAAA,EAAA,uBAAAD,EAAA,uBAGAE,GAAA,CAAAF,EAAAC,IAAAD,EAAA,qBAAAC,EAAA,qBAGAE,GAAA,CAAAH,EAAAC,IAAA,IAAA,KAAAA,EAAA,mBAAA,EAAA,QAAA,EAAA,IAAA,KAAAD,EAAA,mBAAA,EAAA,QAAA,EAIAI,GAAAN,GAAA,CAGE,OAAAA,EAAA,CAAc,IAAA,SAEV,OAAAK,GAAO,IAAA,cAGP,OAAAD,GAAO,IAAA,aAGP,OAAAH,EAAO,QAGP,MAAA,IAAA,CAAa,CAEnB,EAEAM,GAAA,CAAAC,EAAAC,IAAA,CACE,MAAAC,EAAAF,EAAA,cACA,OAAAE,EAAA,SAAA,GAAAD,EAAA,MAAA,YAAA,EAAA,SAAAC,CAAA,GAAAD,EAAA,YAAA,YAAA,EAAA,SAAAC,CAAA,GAAAD,EAAA,SAAA,KAAAE,GAAAA,EAAA,YAAA,EAAA,SAAAD,CAAA,CAAA,CAMF,EAQAE,EAAA,IAEAC,GAAA,IAAA,CACE,KAAA,CAAA,OAAAC,EAAA,KAAAC,CAAA,EAAAC,EAAmC,CAAA,iBAAAJ,IAAA,EACKK,EAAAL,CAAA,CACA,EAExC,CAAAM,EAAAC,CAAA,EAAAC,EAAA,SAAA,CAAA,CAAA,EACA,CAAAC,EAAAC,CAAA,EAAAF,EAAA,SAAArB,EAAA,CAAA,CAAA,EACA,CAAAwB,EAAAC,CAAA,EAAAJ,EAAA,SAAA,CAAA,CAAA,EACA,CAAAZ,EAAAiB,CAAA,EAAAL,EAAA,SAAA,EAAA,EAEAM,EAAAA,UAAA,IAAA,CACEF,EAAAT,EAAA,CAAA,GAAA,IAAA,IAAAA,EAAA,QAAAY,GAAAA,EAAA,QAAA,CAAA,CAAA,EAAA,IAAAhB,GAAA,CAKU,MAAAiB,EAAAb,EAAA,OAAuBY,GAAAA,EAAA,SAAA,SAAAhB,CAAA,CACY,EAAA,OAEnC,MAAA,CAAO,MAAAA,EACE,MAAAiB,EACP,MAAA,GAAAjB,MAAAiB,IACkB,CACpB,CAAA,EAAA,OAAAC,GAAAA,EAAA,MAAA,CAAA,EAAA,KAAA,CAAA3B,EAAAC,IAAAA,EAAA,MAAAD,EAAA,KAAA,EAZV,CAAA,CAeyC,CACzC,EAAA,CAAAa,CAAA,CAAA,EAGF,MAAAe,EAAAC,GAAA,CACEA,EAAA,eAAA,EACAN,EAAAM,EAAA,OAAA,KAAA,CAA4B,EAG9B,CAAAC,EAAAC,CAAA,EAAAb,EAAA,SAAA,EAAA,EAEAc,EAAA,IAAA,CACEf,EAAA,CAAA,CAAA,EACAG,EAAAvB,EAAA,CAAA,CAAA,EACA0B,EAAA,EAAA,EACAQ,EAAA,EAAA,EACA,WAAA,IAAA,CACEA,EAAA,EAAA,CAA8B,EAAA,GAAA,CAC1B,EAGRE,EAAAC,IAEA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,cAAA,CAC8C,KAAA,CAAA,EACnC,KAAAxC,EAAA,CAAA,EACY,WAAA,EACP,CAAA,EAGhByC,EAAAC,IAEAf,EAAAA,UAAA,IAAA,CACE,GAAAc,EAAA,WAAA,CAEE,GAAAA,EAAA,IAAA,OAAA,EACE,OAAAN,IACAC,EAAA,CAAS,KAAA,OAAA,SAAA,KACe,OAAA,EACd,CAAA,EAEV,IAAA,CAAa,EAEfhB,EAAA,CAAA,CAAA,EACAuB,EAAAF,EAAA,IAAA,cAAA,GAAA,EAAA,EAAA,QAAwDG,GAAA,CAEpD,MAAAd,EAAAX,EAAA,KAA4B0B,GAAAA,EAAA,MAAA,YAAA,IAAAD,EAAA,YAAA,CACyB,EAErDd,GACEV,EAAA0B,GAAA,CAAA,GAAAA,EAAAhB,CAAA,CAAA,CACF,CACF,EAEFP,EAAAvB,EAAA,KACc6C,GAAA,OAAA,OAAAA,EAAA,MAAA,YAAA,MAAAE,EAAAN,EAAA,IAAA,MAAA,IAAA,YAAAM,EAAA,eAEuD,GAAA/C,EAAA,CAAA,CACjD,EAEpB0B,EAAAe,EAAA,IAAA,YAAA,GAAA,EAAA,CAAiD,MAGjDrB,EAAAkB,EAAA,IAAA,EACAf,EAAAe,EAAA,IAAA,EACAZ,EAAAY,EAAA,UAAA,EAEF,MAAA,IAAA,CAAa,CAAC,EAAA,CAAA,CAAA,EAIhBX,EAAAA,UAAA,IAAA,OAEEY,EAAA,CAA8B,KAAApB,EACtB,KAAAG,EACA,WAAAb,CACN,CAAA,EAGF2B,EAAA,CAAS,KAAA,OAAA,SAAA,KACe,OAAA,IAAA,IAAA,gBAGhB,KAAA,MAEG,KAAA,UAAA,CACY,KAAAY,EAAA7B,EAAA,IAAA8B,GAAAA,EAAA,KAAA,CAAA,GAAA,OAE2C,KAAA3B,EAAA,UAAAyB,EAAA/C,EAAA,CAAA,IAAA,YAAA+C,EAAA,OAAA,OAAAzB,EAAA,MAIrC,WAAAb,GAAA,MACO,CAAA,CAC3B,CACH,EAAA,SAAA,CACS,CAAA,CACd,EAAA,CAAAA,EAAAa,EAAAH,CAAA,CAAA,EAIH,MAAA+B,EAAAnC,IAAA,WAAAA,IAAA,QAAA,CAAA,EAAAC,EAAA,KAAAd,CAAA,EAAA,KAAAK,GAAAe,EAAA,KAAA,CAAA,EAAA,OAAAM,GAAA,CAOU,MAAAuB,EAAAhC,EAAA,IAAAP,GAAAA,EAAA,KAAA,EACA,OAAAJ,GAAAC,EAAAmB,CAAA,IAAAT,EAAA,SAAA,GAAAS,EAAA,SAAA,OAGyBwB,GAAAD,EAAA,SAAAC,CAAA,CACK,EAAA,SAAA,EACb,CAAA,EAAA,IAAA,CAAAxB,EAAAyB,IAAAC,EAAA,IAAAC,EAAA,CAAA,QAAA3B,GAAAyB,CAAA,CAAA,EAO3B,OAAAG,EAAA,KAAA,MAAA,CAAA,SAAA,CAEIA,EAAA,KAAA,MAAC,CAAA,UAAAC,EACY,gEACT,WACA,WACA,EACF,SAAA,CAEAH,EAAA,IAAAI,EAAC,CAAA,KAAAJ,EAAAA,IAAAK,EAAA,EAAA,EACmB,QAAA,GACX,MAAA,SACA,GAAA,2BACJ,QAAA,kCACK,CAAA,EACVL,EAAA,IACAI,EAAC,CAAA,KAAAJ,EAAAA,IAAAM,EAAA,EAAA,EACiB,QAAA,GACT,MAAA,SACA,GAAA,8BACJ,QAAA,+BACK,CAAA,CACV,CAAA,CAAA,EACFJ,EAAA,KACA,UAAC,CAAA,aAAA,kBACY,UAAAC,EACA,sDACT,UACA,EACF,SAAA,CAEAD,EAAA,KAAA,MAAA,CAAA,UAAAC,EAAA,mBAAA,EAAA,SAAA,CACEH,EAAAA,IAAAO,EAAA,CAAA,aAAA9B,EAAA,WAAAtB,CAAA,CAAA,EAAiE6C,EAAA,IACjEI,EAAC,CAAA,UAAAD,EAAA,2BAAA,EAC0C,KAAAxB,EAAAqB,EAAA,IAGrC,OAAC,CAAA,UAAAG,EACY,eACT,YACA,0BACA,EACF,SAAAH,EAAAA,IAAAQ,EAAA,EAAA,CAEe,CAAA,EAAAR,EAAA,IAAAQ,EAAA,EAAA,EAGF,UAAA,GAGV,cAAA,GACI,QAAA,GACN,MAAA,QACA,KAAA,SACF,QAAA3B,EACI,QAAA,iCACD,CAAA,CACV,EAAA,EACFqB,EAAA,KAAA,MAAA,CAAA,UAAAC,EAAA,oBAAA,WAAA,EAAA,SAAA,CAEEH,EAAA,IAAA,MAAA,CAAA,UAAAG,EAAA,qBAAA,EAAA,SAAAH,EAAA,IACES,EAAC,CAAA,QAAA/D,EACU,eAAAsB,EACO,kBAAAC,CACG,CAAA,EAAA,EAEvB+B,EAAA,IAAA,MAAA,CAAA,UAAAG,EAAA,WAAA,EAAA,SAAAH,EAAA,IAEEU,EAAC,CAAA,QAAAxC,EACU,YAAA,oBACG,gBAAAL,EACK,mBAAAC,CACG,CAAA,EAAA,CAExB,EAAA,CACF,CAAA,CAAA,EACFkC,EAAA,IACA,UAAC,CAAA,aAAA,QACY,UAAAG,EAAA,gCAAA,WAAA,EAC+C,SAAA1C,IAAA,UAAA,CAAA,GAAA,MAAA,CAAA,EAAA,MAAA,EAAA,IAAAkD,GAAAX,EAAA,IAAAY,EAAA,CAAA,EAAAD,CAAA,CAAA,EAAAlD,IAAA,QAAAyC,EAAAA,KAAA,MAAA,CAAA,UAAAC,EAAA,2BAAA,EAAA,SAAA,CAMtDH,MAAA,OAAA,CAAA,UAAAG,EAAA,aAAA,EAAA,SAAA,uBAAA,EAAwD,oBAAO,CAAA,CAAA,EAAAP,EAAA,SAAA,EAAAM,EAAA,KAAA,MAAA,CAAA,UAAAC,EAAA,2BAAA,EAAA,SAAA,CAK/DH,MAAA,OAAA,CAAA,UAAAG,EAAA,aAAA,EAAA,SAAA,oBAAA,EAAqD,2BAAO,CAAA,CAAA,EAAAP,CAI9D,CAAA,CAEJ,CAAA,CAAA,CAGN,EAEAiB,EAAArD,GC9TesD,GAAA,CACb,UAAWD,EACX,WAAY,CACV,YAAa,CACX,QAAS,EACX,EACA,SAAU,CACR,sBAAuB,EACzB,CACF,CACF,EACarD,EAAO,IAAM0C,EAAAA,KAACa,EACvB,CAAA,SAAA,CAAAf,EAAA,IAACgB,EAAY,EAAA,QACZC,EAAO,EAAA,EACRjB,EAAAA,IAACkB,EAAK,CAAA,QAAUlB,EAAA,IAAAa,EAAA,CAAS,CAAA,EAAI,YAAaM,EAAK,YAAa,MAAOA,EAAK,KAAO,CAAA,EAC/EnB,EAAAA,IAACoB,EAAO,CAAA,WAAU,EAAC,CAAA,CAAA,EACrB,QACF5D,EAAK,WAAa,CAChB,GAAGA,EAAK,WACR,YAAa,CACX,OAAQ;AAAA;AAAA;AAAA;AAAA;AAAA,aACR,IAAGiC,EAAAjC,EAAK,aAAL,YAAAiC,EAAiB,WACtB,CACF"}