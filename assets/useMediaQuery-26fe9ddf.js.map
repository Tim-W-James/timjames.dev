{"version":3,"file":"useMediaQuery-26fe9ddf.js","sources":["../../node_modules/.pnpm/react@18.2.0/node_modules/react/cjs/react-jsx-runtime.production.min.js","../../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js","../../node_modules/.pnpm/classnames@2.3.2/node_modules/classnames/index.js","../../src/styles/cssUtils.ts","../../src/hooks/useMediaQuery.ts"],"sourcesContent":["/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\tvar nativeCodeString = '[native code]';\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","// Adapted from: https://kimmo.blog/posts/6-advanced-typescript-the-ultimate-tailwind-typings\n\nimport classnames from \"classnames\";\nimport ClassName from \"./cssClasses\";\n\n/**\n * Wrapper for 'classnames' module with strict typing.\n */\nconst cn = <S1, S2, S3, S4, S5>(\n  // Multiple type parameters are so that TS is able to inference each parameter\n  // individually\n  c1?: TailwindClassParameterValue<S1, null>,\n  c2?: TailwindClassParameterValue<S2, null>,\n  c3?: TailwindClassParameterValue<S3, null>,\n  c4?: TailwindClassParameterValue<S4, null>,\n  c5?: TailwindClassParameterValue<S5, null>\n): string => classnames(c1, c2, c3, c4, c5);\n\n/**\n * Type checking for Tailwind Classes and allows an explicit type for scoped\n * class names to be specified. Is curried to allow the params to be inferred\n *\n * @template ScopedClassNames - auto generated union type of all scoped classes\n */\nexport const cnScoped =\n  <ScopedClassNames extends string>() =>\n  <S1, S2, S3, S4, S5>(\n    c1?: TailwindClassParameterValue<S1, ScopedClassNames>,\n    c2?: TailwindClassParameterValue<S2, ScopedClassNames>,\n    c3?: TailwindClassParameterValue<S3, ScopedClassNames>,\n    c4?: TailwindClassParameterValue<S4, ScopedClassNames>,\n    c5?: TailwindClassParameterValue<S5, ScopedClassNames>\n  ): string =>\n    classnames(c1, c2, c3, c4, c5);\n\ntype InstantiationDepthReducingWhitespace = \"   \" | \"  \" | \" \" | \"\\n\";\n\ntype TrimStart<T extends string> =\n  T extends `${InstantiationDepthReducingWhitespace}${infer Tail}`\n    ? TrimStart<Tail>\n    : T;\n\ntype TrimEnd<T extends string> =\n  T extends `${infer Prefix}${InstantiationDepthReducingWhitespace}`\n    ? TrimEnd<Prefix>\n    : T;\n\ntype Trim<T extends string> = TrimEnd<TrimStart<T>>;\n\ntype Err<Message extends string> = `Error: ${Message}`;\n\ntype SplitToTailwindClassNames<T extends string> =\n  SplitToTailwindClassNamesInner<Trim<T>>;\n\ntype ScopedClassNamePrefix = \"_\";\n\n// Narrow the type to exclude scoped classes\ntype IsValidClass<\n  T extends string,\n  ScopedClassNames\n> = T extends `${ScopedClassNamePrefix}${infer _Tail}`\n  ? T extends ScopedClassNames\n    ? ScopedClassNames extends string\n      ? T\n      : Err<`'${T}' is scoped, and no ScopedClassNames type is specified`>\n    : Err<`'${T}' is scoped, and is not included in the ScopedClassNames type`>\n  : // Make sure each item is a valid `ClassName`\n  SplitToTailwindClassNames<T> extends ClassName[]\n  ? // If valid, success and return `T`\n    T\n  : // Cover an edge case where, e.g., flex-col is invalid because the\n  // flex class exists\n  T extends ClassName\n  ? T\n  : // If still invalid, raise an error\n    GetFirstError<SplitToTailwindClassNames<T>>;\n\ntype SplitToTailwindClassNamesInner<T extends string> =\n  T extends `${ClassName}${infer Tail}`\n    ? T extends `${infer C}${Tail}`\n      ? [C, ...SplitToTailwindClassNames<Trim<Tail>>]\n      : Err<\"Should not happen\">\n    : // Handles cases where `T` does not match\n    // ${ClassName}${Tail}. For example\n    // 'block', '', '\\n\\n', 'invalid', or 'invalid  block'\n    // Note: `Tail` has already been trimmed from whitespace\n    T extends `${infer Tail}`\n    ? Tail extends ClassName\n      ? // `Tail` equals a valid Tailwind class.\n        // End recursion successfully.\n        [Tail]\n      : Trim<Tail> extends \"\"\n      ? // `Tail` has only whitespace left.\n        // End recursion successfully.\n        []\n      : // Something else was found.\n        // Raise an error\n        [Err<`'${Tail}' is not a valid Tailwind or scoped class`>]\n    : // Should never happen as `T` is a string.\n      [Err<\"Should not happen\">];\n\n// Gets the first string of an array that starts with 'Error: '\n// Must be used only when `T` actually includes an error item\ntype GetFirstError<T extends unknown[]> = T extends [infer Head, ...infer Tail]\n  ? Head extends `Error: ${infer _Message}`\n    ? // Match found, return\n      Head\n    : // Continue searching for an error string\n      GetFirstError<Tail>\n  : never;\n\ntype IsValidString<T extends string, ScopedClassNames> = string extends T\n  ? Err<\"Unexpected generic string\">\n  : IsValidClass<T, ScopedClassNames>;\n\n// The object format for 'classnames' module\ntype ClassNamesObject = Record<string, boolean>;\n\n// See https://stackoverflow.com/questions/65737948/how-to-type-check-if-object-keys-conform-a-conditional-recursive-template-type\nexport type TailwindClassNamesObject<\n  T extends ClassNamesObject,\n  ScopedClassNames\n> = {\n  // `& string` explained at https://github.com/microsoft/TypeScript/pull/40336#issuecomment-717319022\n  [K in keyof T & string]: K extends IsValidString<K, ScopedClassNames>\n    ? T[K]\n    : // If invalid class found, return the error\n      IsValidString<K, ScopedClassNames>;\n};\n\ntype TailwindClassNamesArray<T, ScopedClassNames> = {\n  [K in keyof T]: K extends IsValidString<T[K] & string, ScopedClassNames>\n    ? T[K]\n    : // If invalid class found, return the error\n      IsValidString<T[K] & string, ScopedClassNames>;\n};\n\n// Parameter can be a string, array or object format\nexport type TailwindClassParameterValue<S, ScopedClassNames> = S extends string\n  ? IsValidString<S, ScopedClassNames>\n  : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  S extends any[]\n  ? TailwindClassNamesArray<S, ScopedClassNames>\n  : S extends ClassNamesObject\n  ? TailwindClassNamesObject<S, ScopedClassNames>\n  : // Format not supported\n    never;\n\nexport default cn;\n","/**\n * Hook to check if a css media query is true\n *\n * @param {string} query\n * @example useMediaQuery(\"(min-width: 1280px)\")\n */\nconst useMediaQuery = (query: string) => {\n  const [matches, setMatches] = useState(false);\n  useEffect(\n    () => {\n      const mediaQuery = window.matchMedia(query);\n      setMatches(mediaQuery.matches);\n      const handler = (event: MediaQueryListEvent) => setMatches(event.matches);\n      mediaQuery.addEventListener(\"change\", handler);\n      return () => mediaQuery.removeEventListener(\"change\", handler);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [] // Empty array ensures effect is only run on mount and unmount\n  );\n  return matches;\n};\n\n/**\n * Check if on a mobile device\n */\nexport const useMobileQuery = () =>\n  useMediaQuery(\"(hover: none) and (pointer: coarse)\");\n\n/**\n * Check if the primary input is touch (not necessarily a mobile device)\n */\nexport const useTouchInputQuery = () => useMediaQuery(\"(pointer: coarse)\");\n\nexport default useMediaQuery;\n"],"names":["f","require$$0","k","l","m","n","p","q","c","a","g","b","d","e","h","reactJsxRuntime_production_min","module","hasOwn","classNames","classes","i","arg","argType","inner","key","cn","c1","c2","c3","c4","c5","classnames","cnScoped","useMediaQuery","query","matches","setMatches","useState","useEffect","mediaQuery","handler","event","useMobileQuery","useTouchInputQuery"],"mappings":";;;;;;;;GASa,IAAIA,EAAEC,EAAiBC,EAAE,OAAO,IAAI,eAAe,EAAEC,EAAE,OAAO,IAAI,gBAAgB,EAAEC,EAAE,OAAO,UAAU,eAAeC,EAAEL,EAAE,mDAAmD,kBAAkBM,EAAE,CAAC,IAAI,GAAG,IAAI,GAAG,OAAO,GAAG,SAAS,EAAE,EAClP,SAASC,EAAEC,EAAEC,EAAEC,EAAE,CAAC,IAAIC,EAAEC,EAAE,GAAGC,EAAE,KAAKC,EAAE,KAAcJ,IAAT,SAAaG,EAAE,GAAGH,GAAYD,EAAE,MAAX,SAAiBI,EAAE,GAAGJ,EAAE,KAAcA,EAAE,MAAX,SAAiBK,EAAEL,EAAE,KAAK,IAAIE,KAAKF,EAAEL,EAAE,KAAKK,EAAEE,CAAC,GAAG,CAACL,EAAE,eAAeK,CAAC,IAAIC,EAAED,GAAGF,EAAEE,IAAI,GAAGH,GAAGA,EAAE,aAAa,IAAIG,KAAKF,EAAED,EAAE,aAAaC,EAAWG,EAAED,KAAX,SAAgBC,EAAED,GAAGF,EAAEE,IAAI,MAAM,CAAC,SAAST,EAAE,KAAKM,EAAE,IAAIK,EAAE,IAAIC,EAAE,MAAMF,EAAE,OAAOP,EAAE,OAAO,CAAC,YAAkBF,EAAaY,EAAA,IAACR,EAAEQ,EAAA,KAAaR,eCPxWS,EAAA,QAAiBf;;;;gBCIlB,UAAY,CAGZ,IAAIgB,EAAS,CAAE,EAAC,eAGhB,SAASC,GAAa,CAGrB,QAFIC,EAAU,CAAA,EAELC,EAAI,EAAGA,EAAI,UAAU,OAAQA,IAAK,CAC1C,IAAIC,EAAM,UAAUD,GACpB,GAAKC,EAEL,KAAIC,EAAU,OAAOD,EAErB,GAAIC,IAAY,UAAYA,IAAY,SACvCH,EAAQ,KAAKE,CAAG,UACN,MAAM,QAAQA,CAAG,GAC3B,GAAIA,EAAI,OAAQ,CACf,IAAIE,EAAQL,EAAW,MAAM,KAAMG,CAAG,EAClCE,GACHJ,EAAQ,KAAKI,CAAK,CAEnB,UACSD,IAAY,SAAU,CAChC,GAAID,EAAI,WAAa,OAAO,UAAU,UAAY,CAACA,EAAI,SAAS,SAAQ,EAAG,SAAS,eAAe,EAAG,CACrGF,EAAQ,KAAKE,EAAI,SAAU,CAAA,EAC3B,QACA,CAED,QAASG,KAAOH,EACXJ,EAAO,KAAKI,EAAKG,CAAG,GAAKH,EAAIG,IAChCL,EAAQ,KAAKK,CAAG,CAGlB,EACD,CAED,OAAOL,EAAQ,KAAK,GAAG,CACvB,CAEoCH,EAAO,SAC3CE,EAAW,QAAUA,EACrBF,EAAA,QAAiBE,GAOjB,OAAO,WAAaA,CAEtB,oBCnDMO,EAAK,CAGTC,EACAC,EACAC,EACAC,EACAC,IACWC,EAAWL,EAAIC,EAAIC,EAAIC,EAAIC,CAAE,EAQ7BE,EACX,IACA,CACEN,EACAC,EACAC,EACAC,EACAC,IAEAC,EAAWL,EAAIC,EAAIC,EAAIC,EAAIC,CAAE,EC3BjCG,EAAAC,GAAA,CACE,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAAA,EACAC,OAAAA,EAAA,UAAA,IAAA,CAEI,MAAAC,EAAA,OAAA,WAAAL,CAAA,EACAE,EAAAG,EAAA,OAAA,EACA,MAAAC,EAAAC,GAAAL,EAAAK,EAAA,OAAA,EACA,OAAAF,EAAA,iBAAA,SAAAC,CAAA,EACA,IAAAD,EAAA,oBAAA,SAAAC,CAAA,CAA6D,EAC/D,CAAA,CAEC,EAEHL,CACF,EAKOO,EAAA,IAAAT,EAAA,qCAAA,EAMAU,EAAA,IAAAV,EAAA,mBAAA"}