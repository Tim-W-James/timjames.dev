{"version":3,"file":"encodeQueryParams-54b1f1a4.js","sources":["../../src/hooks/useLocalStorage.ts","../../src/hooks/useQueryParams.ts","../../src/utils/encodeQueryParams.ts"],"sourcesContent":["// Adapted from: https://usehooks.com/useLocalStorage/\n\n/**\n * Get and set a value in browser local storage\n *\n * @param {string} key - key for the data\n * @param {T} initialValue - initial data value\n */\nconst useLocalStorage = <T>(key: string, initialValue: T) => {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    if (typeof window === \"undefined\") {\n      return initialValue;\n    }\n\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.error(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value: T | ((val: T) => T)) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      if (typeof window !== \"undefined\") {\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      }\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.error(error);\n    }\n  };\n\n  return [storedValue, setValue] as const;\n};\n\nexport default useLocalStorage;\n","import { useLocation } from \"react-router-dom\";\n\n/**\n * Get query params from the current URL.\n */\nexport const useQueryParams = () => {\n  const { search } = useLocation();\n\n  return useMemo(() => new URLSearchParams(search), [search]);\n};\n","export const encodeArrayAsCsv = (data: string[]) =>\n  data.map((item) => encodeURIComponent(item)).join(\",\");\n\nexport const decodeArrayAsCsv = (data: string) =>\n  data.split(\",\").map((item) => decodeURIComponent(item));\n"],"names":["useLocalStorage","key","initialValue","storedValue","setStoredValue","useState","item","error","value","valueToStore","useQueryParams","search","useLocation","useMemo","encodeArrayAsCsv","data","decodeArrayAsCsv"],"mappings":"gFAQA,MAAAA,EAAA,CAAAC,EAAAC,IAAA,CAGE,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,IAAA,CACE,GAAA,OAAA,OAAA,IACE,OAAAH,EAGF,GAAA,CAEE,MAAAI,EAAA,OAAA,aAAA,QAAAL,CAAA,EAEA,OAAAK,EAAA,KAAA,MAAAA,CAAA,EAAAJ,CAAiC,OAAAK,EAAA,CAGjC,eAAA,MAAAA,CAAA,EACAL,CAAO,CACT,CAAA,EAsBF,MAAA,CAAAC,EAjBAK,GAAA,CACE,GAAA,CAEE,MAAAC,EAAAD,aAAA,SAAAA,EAAAL,CAAA,EAAAK,EAGAJ,EAAAK,CAAA,EAEA,OAAA,OAAA,KACE,OAAA,aAAA,QAAAR,EAAA,KAAA,UAAAQ,CAAA,CAAA,CACF,OAAAF,EAAA,CAGA,QAAA,MAAAA,CAAA,CAAmB,CACrB,CAGF,CACF,EC3COG,EAAA,IAAA,CACL,KAAA,CAAA,OAAAC,GAAAC,IAEA,OAAAC,EAAAA,QAAA,IAAA,IAAA,gBAAAF,CAAA,EAAA,CAAAA,CAAA,CAAA,CACF,ECTaG,EAAoBC,GAC/BA,EAAK,IAAKT,GAAS,mBAAmBA,CAAI,CAAC,EAAE,KAAK,GAAG,EAE1CU,EAAoBD,GAC/BA,EAAK,MAAM,GAAG,EAAE,IAAKT,GAAS,mBAAmBA,CAAI,CAAC"}