{"version":3,"file":"cssUtils-e467a5c7.js","sources":["../../node_modules/.pnpm/react@18.2.0/node_modules/react/cjs/react-jsx-runtime.production.min.js","../../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js","../../node_modules/.pnpm/clsx@2.0.0/node_modules/clsx/dist/clsx.mjs","../../src/styles/cssUtils.ts"],"sourcesContent":["/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f);else for(t in e)e[t]&&(n&&(n+=\" \"),n+=t);return n}export function clsx(){for(var e,t,f=0,n=\"\";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;","// Adapted from: https://kimmo.blog/posts/6-advanced-typescript-the-ultimate-tailwind-typings\n\nimport clsx from \"clsx\";\n\nimport ClassName from \"./cssClasses\";\n\n// eslint-disable-next-line jsdoc/require-param\n/**\n * Wrapper for 'classnames' module with strict typing.\n */\nconst cn = <S1, S2, S3, S4, S5, S6, S7, S8, S9, S10>(\n  // Multiple type parameters are so that TS is able to inference each parameter\n  // individually\n  c1?: TailwindClassParameterValue<S1, null>,\n  c2?: TailwindClassParameterValue<S2, null>,\n  c3?: TailwindClassParameterValue<S3, null>,\n  c4?: TailwindClassParameterValue<S4, null>,\n  c5?: TailwindClassParameterValue<S5, null>,\n  c6?: TailwindClassParameterValue<S6, null>,\n  c7?: TailwindClassParameterValue<S7, null>,\n  c8?: TailwindClassParameterValue<S8, null>,\n  c9?: TailwindClassParameterValue<S9, null>,\n  c10?: TailwindClassParameterValue<S10, null>\n): string => clsx(c1, c2, c3, c4, c5, c6, c7, c8, c9, c10);\n\n/**\n * Type checking for Tailwind Classes and infers scoped class names from a\n * record of strings. Is curried to allow the params to be inferred\n *\n * @param scopedClassNames auto generated record of all scoped classes\n */\nexport const cnScoped = (scopedClassNames: Record<string, string>) => {\n  type ScopedClassNames =\n    (typeof scopedClassNames)[keyof typeof scopedClassNames];\n  return <S1, S2, S3, S4, S5, S6, S7, S8, S9, S10>(\n    c1?: TailwindClassParameterValue<S1, ScopedClassNames>,\n    c2?: TailwindClassParameterValue<S2, ScopedClassNames>,\n    c3?: TailwindClassParameterValue<S3, ScopedClassNames>,\n    c4?: TailwindClassParameterValue<S4, ScopedClassNames>,\n    c5?: TailwindClassParameterValue<S5, ScopedClassNames>,\n    c6?: TailwindClassParameterValue<S6, ScopedClassNames>,\n    c7?: TailwindClassParameterValue<S7, ScopedClassNames>,\n    c8?: TailwindClassParameterValue<S8, ScopedClassNames>,\n    c9?: TailwindClassParameterValue<S9, ScopedClassNames>,\n    c10?: TailwindClassParameterValue<S10, ScopedClassNames>\n  ): string => clsx(c1, c2, c3, c4, c5, c6, c7, c8, c9, c10);\n};\n\n/**\n * Type checking for Tailwind Classes and allows an explicit type for scoped\n * class names to be specified. Is curried to allow the params to be inferred\n *\n * @template ScopedClassNames - auto generated union type of all scoped classes\n */\nexport const cnScopedUnion =\n  <ScopedClassNames>() =>\n  <S1, S2, S3, S4, S5, S6, S7, S8, S9, S10>(\n    c1?: TailwindClassParameterValue<S1, ScopedClassNames>,\n    c2?: TailwindClassParameterValue<S2, ScopedClassNames>,\n    c3?: TailwindClassParameterValue<S3, ScopedClassNames>,\n    c4?: TailwindClassParameterValue<S4, ScopedClassNames>,\n    c5?: TailwindClassParameterValue<S5, ScopedClassNames>,\n    c6?: TailwindClassParameterValue<S6, ScopedClassNames>,\n    c7?: TailwindClassParameterValue<S7, ScopedClassNames>,\n    c8?: TailwindClassParameterValue<S8, ScopedClassNames>,\n    c9?: TailwindClassParameterValue<S9, ScopedClassNames>,\n    c10?: TailwindClassParameterValue<S10, ScopedClassNames>\n  ): string =>\n    clsx(c1, c2, c3, c4, c5, c6, c7, c8, c9, c10);\n\ntype InstantiationDepthReducingWhitespace = \"   \" | \"  \" | \" \" | \"\\n\";\n\ntype TrimStart<T extends string> =\n  T extends `${InstantiationDepthReducingWhitespace}${infer Tail}`\n    ? TrimStart<Tail>\n    : T;\n\ntype TrimEnd<T extends string> =\n  T extends `${infer Prefix}${InstantiationDepthReducingWhitespace}`\n    ? TrimEnd<Prefix>\n    : T;\n\ntype Trim<T extends string> = TrimEnd<TrimStart<T>>;\n\ntype Err<Message extends string> = `Error: ${Message}`;\n\ntype SplitToTailwindClassNames<T extends string> =\n  SplitToTailwindClassNamesInner<Trim<T>>;\n\ntype ScopedClassNamePrefix = \"_\";\n\n// Narrow the type to exclude scoped classes\ntype IsValidClass<\n  T extends string,\n  ScopedClassNames,\n> = T extends `${ScopedClassNamePrefix}${infer _Tail}`\n  ? T extends ScopedClassNames\n    ? ScopedClassNames extends string\n      ? T\n      : Err<`'${T}' is scoped, and no ScopedClassNames type is specified`>\n    : Err<`'${T}' is scoped, and is not included in the ScopedClassNames type`>\n  : // Make sure each item is a valid `ClassName`\n  SplitToTailwindClassNames<T> extends ClassName[]\n  ? // If valid, success and return `T`\n    T\n  : // Cover an edge case where, e.g., flex-col is invalid because the\n  // flex class exists\n  T extends ClassName\n  ? T\n  : // If still invalid, raise an error\n    GetFirstError<SplitToTailwindClassNames<T>>;\n\ntype SplitToTailwindClassNamesInner<T extends string> =\n  T extends `${ClassName}${infer Tail}`\n    ? T extends `${infer C}${Tail}`\n      ? [C, ...SplitToTailwindClassNames<Trim<Tail>>]\n      : Err<\"Should not happen\">\n    : // Handles cases where `T` does not match\n    // ${ClassName}${Tail}. For example\n    // 'block', '', '\\n\\n', 'invalid', or 'invalid  block'\n    // Note: `Tail` has already been trimmed from whitespace\n    T extends `${infer Tail}`\n    ? Tail extends ClassName\n      ? // `Tail` equals a valid Tailwind class.\n        // End recursion successfully.\n        [Tail]\n      : Trim<Tail> extends \"\"\n      ? // `Tail` has only whitespace left.\n        // End recursion successfully.\n        []\n      : // Something else was found.\n        // Raise an error\n        [Err<`'${Tail}' is not a valid Tailwind or scoped class`>]\n    : // Should never happen as `T` is a string.\n      [Err<\"Should not happen\">];\n\n// Gets the first string of an array that starts with 'Error: '\n// Must be used only when `T` actually includes an error item\ntype GetFirstError<T extends unknown[]> = T extends [infer Head, ...infer Tail]\n  ? Head extends `Error: ${infer _Message}`\n    ? // Match found, return\n      Head\n    : // Continue searching for an error string\n      GetFirstError<Tail>\n  : never;\n\ntype IsValidString<T extends string, ScopedClassNames> = string extends T\n  ? Err<\"Unexpected generic string\">\n  : IsValidClass<T, ScopedClassNames>;\n\n// The object format for 'classnames' module\ntype ClassNamesObject = Record<string, boolean>;\n\n// See https://stackoverflow.com/questions/65737948/how-to-type-check-if-object-keys-conform-a-conditional-recursive-template-type\ntype TailwindClassNamesObject<T extends ClassNamesObject, ScopedClassNames> = {\n  // `& string` explained at https://github.com/microsoft/TypeScript/pull/40336#issuecomment-717319022\n  [K in keyof T & string]: K extends IsValidString<K, ScopedClassNames>\n    ? T[K]\n    : // If invalid class found, return the error\n      IsValidString<K, ScopedClassNames>;\n};\n\ntype TailwindClassNamesArray<T, ScopedClassNames> = {\n  [K in keyof T]: K extends IsValidString<T[K] & string, ScopedClassNames>\n    ? T[K]\n    : // If invalid class found, return the error\n      IsValidString<T[K] & string, ScopedClassNames>;\n};\n\n// Parameter can be a string, array or object format\ntype TailwindClassParameterValue<S, ScopedClassNames> = S extends string\n  ? IsValidString<S, ScopedClassNames>\n  : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  S extends any[]\n  ? TailwindClassNamesArray<S, ScopedClassNames>\n  : S extends ClassNamesObject\n  ? TailwindClassNamesObject<S, ScopedClassNames>\n  : // Format not supported\n    never;\n\nexport default cn;\n"],"names":["f","require$$0","k","l","m","n","p","q","c","a","g","b","d","e","h","reactJsxRuntime_production_min","jsxRuntimeModule","r","t","clsx","cn","c1","c2","c3","c4","c5","c6","c7","c8","c9","c10","cnScoped","scopedClassNames","cn$1"],"mappings":";;;;;;;;GASa,IAAIA,EAAEC,EAAiBC,EAAE,OAAO,IAAI,eAAe,EAAEC,EAAE,OAAO,IAAI,gBAAgB,EAAEC,EAAE,OAAO,UAAU,eAAeC,EAAEL,EAAE,mDAAmD,kBAAkBM,EAAE,CAAC,IAAI,GAAG,IAAI,GAAG,OAAO,GAAG,SAAS,EAAE,EAClP,SAASC,EAAEC,EAAEC,EAAEC,EAAE,CAAC,IAAIC,EAAEC,EAAE,GAAGC,EAAE,KAAKC,EAAE,KAAcJ,IAAT,SAAaG,EAAE,GAAGH,GAAYD,EAAE,MAAX,SAAiBI,EAAE,GAAGJ,EAAE,KAAcA,EAAE,MAAX,SAAiBK,EAAEL,EAAE,KAAK,IAAIE,KAAKF,EAAEL,EAAE,KAAKK,EAAEE,CAAC,GAAG,CAACL,EAAE,eAAeK,CAAC,IAAIC,EAAED,CAAC,EAAEF,EAAEE,CAAC,GAAG,GAAGH,GAAGA,EAAE,aAAa,IAAIG,KAAKF,EAAED,EAAE,aAAaC,EAAWG,EAAED,CAAC,IAAZ,SAAgBC,EAAED,CAAC,EAAEF,EAAEE,CAAC,GAAG,MAAM,CAAC,SAAST,EAAE,KAAKM,EAAE,IAAIK,EAAE,IAAIC,EAAE,MAAMF,EAAE,OAAOP,EAAE,OAAO,CAAC,YAAkBF,EAAaY,EAAA,IAACR,EAAEQ,EAAA,KAAaR,ECPxWS,EAAA,QAAiBf,kBCHnB,SAASgB,EAAEJ,EAAE,CAAC,IAAIK,EAAElB,EAAEK,EAAE,GAAG,GAAa,OAAOQ,GAAjB,UAA8B,OAAOA,GAAjB,SAAmBR,GAAGQ,UAAoB,OAAOA,GAAjB,SAAmB,GAAG,MAAM,QAAQA,CAAC,EAAE,IAAIK,EAAE,EAAEA,EAAEL,EAAE,OAAOK,IAAIL,EAAEK,CAAC,IAAIlB,EAAEiB,EAAEJ,EAAEK,CAAC,CAAC,KAAKb,IAAIA,GAAG,KAAKA,GAAGL,OAAQ,KAAIkB,KAAKL,EAAEA,EAAEK,CAAC,IAAIb,IAAIA,GAAG,KAAKA,GAAGa,GAAG,OAAOb,CAAC,CAAQ,SAASc,GAAM,CAAC,QAAQN,EAAEK,EAAElB,EAAE,EAAEK,EAAE,GAAGL,EAAE,UAAU,SAASa,EAAE,UAAUb,GAAG,KAAKkB,EAAED,EAAEJ,CAAC,KAAKR,IAAIA,GAAG,KAAKA,GAAGa,GAAG,OAAOb,CAAC,CCUjW,MAAMe,EAAK,CAGTC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,IACWX,EAAKE,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,CAAG,EAQ5CC,EAAYC,GAGhB,CACLX,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,IACWX,EAAKE,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,CAAG,EAuI3DG,EAAeb","x_google_ignoreList":[0,1,2]}